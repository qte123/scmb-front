{"ast":null,"code":"import _objectSpread from \"D:/scmb/scmb_front/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"D:/scmb/scmb_front/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/scmb/scmb_front/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport axios from 'axios';\nimport config from '../config';\nvar baseUrl = process.env.NODE_ENV === 'development' ? config.baseUrl.dev : config.baseUrl.pro;\n\nvar HttpRequest = /*#__PURE__*/function () {\n  function HttpRequest(baseUrl) {\n    _classCallCheck(this, HttpRequest);\n\n    this.baseUrl = baseUrl;\n  }\n\n  _createClass(HttpRequest, [{\n    key: \"getInsideConfig\",\n    value: function getInsideConfig() {\n      var config = {\n        baseUrl: this.baseUrl,\n        header: {}\n      };\n      return config;\n    }\n  }, {\n    key: \"interceptors\",\n    value: function interceptors(instance) {\n      // 添加请求拦截器\n      instance.interceptors.request.use(function (config) {\n        // 在发送请求之前做些什么\n        return config;\n      }, function (error) {\n        // 对请求错误做些什么\n        return Promise.reject(error);\n      }); // 添加响应拦截器\n\n      instance.interceptors.response.use(function (response) {\n        // 对响应数据做点什么\n        return response;\n      }, function (error) {\n        // 对响应错误做点什么\n        return Promise.reject(error);\n      });\n    }\n  }, {\n    key: \"request\",\n    value: function request(options) {\n      var instance = axios.create();\n      options = _objectSpread(_objectSpread({}, this.getInsideConfig()), options);\n      this.interceptors(instance);\n      return instance(options);\n    }\n  }]);\n\n  return HttpRequest;\n}();\n\nexport default new HttpRequest(baseUrl);","map":{"version":3,"sources":["D:/scmb/scmb_front/api/axios.js"],"names":["axios","config","baseUrl","process","env","NODE_ENV","dev","pro","HttpRequest","header","instance","interceptors","request","use","error","Promise","reject","response","options","create","getInsideConfig"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,IAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,GAAyCJ,MAAM,CAACC,OAAP,CAAeI,GAAxD,GAA8DL,MAAM,CAACC,OAAP,CAAeK,GAA7F;;IAEMC,W;AACJ,uBAAYN,OAAZ,EAAqB;AAAA;;AACnB,SAAKA,OAAL,GAAeA,OAAf;AACD;;;;WAED,2BAAmB;AACjB,UAAMD,MAAM,GAAG;AACbC,QAAAA,OAAO,EAAE,KAAKA,OADD;AAEbO,QAAAA,MAAM,EAAE;AAFK,OAAf;AAIA,aAAOR,MAAP;AACD;;;WACD,sBAAcS,QAAd,EAAwB;AACtB;AACAA,MAAAA,QAAQ,CAACC,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CAAkC,UAAUZ,MAAV,EAAkB;AAClD;AACA,eAAOA,MAAP;AACD,OAHD,EAGG,UAAUa,KAAV,EAAiB;AAClB;AACA,eAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,OAND,EAFsB,CAUtB;;AACAJ,MAAAA,QAAQ,CAACC,YAAT,CAAsBM,QAAtB,CAA+BJ,GAA/B,CAAmC,UAAUI,QAAV,EAAoB;AACrD;AACA,eAAOA,QAAP;AACD,OAHD,EAGG,UAAUH,KAAV,EAAiB;AAClB;AACA,eAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,OAND;AAOD;;;WACD,iBAASI,OAAT,EAAkB;AAChB,UAAMR,QAAQ,GAAGV,KAAK,CAACmB,MAAN,EAAjB;AACAD,MAAAA,OAAO,mCAAQ,KAAKE,eAAL,EAAR,GAAmCF,OAAnC,CAAP;AACA,WAAKP,YAAL,CAAkBD,QAAlB;AACA,aAAOA,QAAQ,CAACQ,OAAD,CAAf;AACD;;;;;;AAGH,eAAe,IAAIV,WAAJ,CAAgBN,OAAhB,CAAf","sourcesContent":["import axios from 'axios'\r\nimport config from '../config'\r\n\r\nconst baseUrl = process.env.NODE_ENV === 'development' ? config.baseUrl.dev : config.baseUrl.pro\r\n\r\nclass HttpRequest {\r\n  constructor(baseUrl) {\r\n    this.baseUrl = baseUrl\r\n  }\r\n\r\n  getInsideConfig () {\r\n    const config = {\r\n      baseUrl: this.baseUrl,\r\n      header: {}\r\n    }\r\n    return config\r\n  }\r\n  interceptors (instance) {\r\n    // 添加请求拦截器\r\n    instance.interceptors.request.use(function (config) {\r\n      // 在发送请求之前做些什么\r\n      return config;\r\n    }, function (error) {\r\n      // 对请求错误做些什么\r\n      return Promise.reject(error);\r\n    });\r\n\r\n    // 添加响应拦截器\r\n    instance.interceptors.response.use(function (response) {\r\n      // 对响应数据做点什么\r\n      return response;\r\n    }, function (error) {\r\n      // 对响应错误做点什么\r\n      return Promise.reject(error);\r\n    });\r\n  }\r\n  request (options) {\r\n    const instance = axios.create()\r\n    options = { ...this.getInsideConfig(), ...options }\r\n    this.interceptors(instance)\r\n    return instance(options)\r\n  }\r\n}\r\n\r\nexport default new HttpRequest(baseUrl)"]},"metadata":{},"sourceType":"module"}